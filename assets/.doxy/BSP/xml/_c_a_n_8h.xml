<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="_c_a_n_8h" kind="file" language="C++">
    <compoundname>CAN.h</compoundname>
    <includes local="yes">stm32xx_hal.h</includes>
    <includedby refid="_c_a_n_8c" local="yes">bsp/Src/CAN.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>bsp/Inc/CAN.h</label>
        <link refid="_c_a_n_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stm32xx_hal.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="_c_a_n_8h_1a507b4ed3fc531e0c40aa8812174e3e1d" prot="public" static="no" strong="no">
        <type></type>
        <name>can_status_t</name>
        <enumvalue id="_c_a_n_8h_1a507b4ed3fc531e0c40aa8812174e3e1dabf22114c59d1a69b0796b28d3486fbf8" prot="public">
          <name>CAN_ERR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_a_n_8h_1a507b4ed3fc531e0c40aa8812174e3e1dab7db0e53b737c0839be931efcb79246e" prot="public">
          <name>CAN_OK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_a_n_8h_1a507b4ed3fc531e0c40aa8812174e3e1daff29dfa90428ea73bc47e54b8ee0d43e" prot="public">
          <name>CAN_SENT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_a_n_8h_1a507b4ed3fc531e0c40aa8812174e3e1da51244aed50587da9655e1559b3a3daec" prot="public">
          <name>CAN_RECV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_c_a_n_8h_1a507b4ed3fc531e0c40aa8812174e3e1da24485c2f3c00368d084bcb14d3a56bf9" prot="public">
          <name>CAN_EMPTY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="bsp/Inc/CAN.h" line="47" column="1" bodyfile="bsp/Inc/CAN.h" bodystart="47" bodyend="53"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="_c_a_n_8h_1adb98f482f84dbc90394b3878fe84d6a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>can_status_t</type>
        <definition>can_status_t can_init</definition>
        <argsstring>(CAN_HandleTypeDef *handle, CAN_FilterTypeDef *filter)</argsstring>
        <name>can_init</name>
        <param>
          <type>CAN_HandleTypeDef *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>CAN_FilterTypeDef *</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="bsp/Inc/CAN.h" line="68" column="14" bodyfile="bsp/Src/CAN.c" bodystart="386" bodyend="454" declfile="bsp/Inc/CAN.h" declline="68" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8h_1aeeba29faf74a0c662365149bf0f5780e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>can_status_t</type>
        <definition>can_status_t can_deinit</definition>
        <argsstring>(CAN_HandleTypeDef *handle)</argsstring>
        <name>can_deinit</name>
        <param>
          <type>CAN_HandleTypeDef *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="bsp/Inc/CAN.h" line="69" column="14" bodyfile="bsp/Src/CAN.c" bodystart="456" bodyend="472" declfile="bsp/Inc/CAN.h" declline="69" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8h_1a95783594f75e8feb9203af4ec4e28aed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>can_status_t</type>
        <definition>can_status_t can_start</definition>
        <argsstring>(CAN_HandleTypeDef *handle)</argsstring>
        <name>can_start</name>
        <param>
          <type>CAN_HandleTypeDef *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="bsp/Inc/CAN.h" line="70" column="14" bodyfile="bsp/Src/CAN.c" bodystart="474" bodyend="480" declfile="bsp/Inc/CAN.h" declline="70" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8h_1adee9ce61f8d5f4b4cdfc97c8d7b0dafc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>can_status_t</type>
        <definition>can_status_t can_stop</definition>
        <argsstring>(CAN_HandleTypeDef *handle)</argsstring>
        <name>can_stop</name>
        <param>
          <type>CAN_HandleTypeDef *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="bsp/Inc/CAN.h" line="71" column="14" bodyfile="bsp/Src/CAN.c" bodystart="482" bodyend="488" declfile="bsp/Inc/CAN.h" declline="71" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8h_1a5308363109455439841baf22512c415f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>can_status_t</type>
        <definition>can_status_t can_send</definition>
        <argsstring>(CAN_HandleTypeDef *handle, const CAN_TxHeaderTypeDef *header, const uint8_t data[], TickType_t delay_ticks)</argsstring>
        <name>can_send</name>
        <param>
          <type>CAN_HandleTypeDef *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const CAN_TxHeaderTypeDef *</type>
          <declname>header</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>data</declname>
          <array>[]</array>
        </param>
        <param>
          <type>TickType_t</type>
          <declname>delay_ticks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="bsp/Inc/CAN.h" line="72" column="14" bodyfile="bsp/Src/CAN.c" bodystart="572" bodyend="632" declfile="bsp/Inc/CAN.h" declline="72" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="_c_a_n_8h_1a9891bb23cf1be1a31110671519764f74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>can_status_t</type>
        <definition>can_status_t can_recv</definition>
        <argsstring>(CAN_HandleTypeDef *handle, uint16_t id, CAN_RxHeaderTypeDef *header, uint8_t data[], TickType_t delay_ticks)</argsstring>
        <name>can_recv</name>
        <param>
          <type>CAN_HandleTypeDef *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>CAN_RxHeaderTypeDef *</type>
          <declname>header</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
          <array>[]</array>
        </param>
        <param>
          <type>TickType_t</type>
          <declname>delay_ticks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="bsp/Inc/CAN.h" line="73" column="14" bodyfile="bsp/Src/CAN.c" bodystart="490" bodyend="570" declfile="bsp/Inc/CAN.h" declline="73" declcolumn="14"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>CAN_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stm32xx_hal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CAN1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#error<sp/>&quot;[CONFIG]<sp/>CAN<sp/>not<sp/>enabled<sp/>on<sp/>this<sp/>chip.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CAN1<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>Descriptions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Init<sp/>initializes<sp/>the<sp/>CAN<sp/>peripheral<sp/>given<sp/>the<sp/>configuration</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>(does<sp/>not<sp/>start<sp/>the<sp/>CAN<sp/>peripheral)</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>DeInit<sp/>deinitlaizes<sp/>the<sp/>CAN<sp/>peripheral<sp/>meaning<sp/>the<sp/>configuration<sp/>is</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>reset<sp/>(default<sp/>values)</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>Start<sp/>starts<sp/>the<sp/>CAN<sp/>peripheral<sp/>meaning<sp/>it<sp/>is<sp/>able<sp/>to<sp/>interrupt</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>and<sp/>act<sp/>on<sp/>messages</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>Stop<sp/>stops<sp/>the<sp/>CAN<sp/>peripheral<sp/>meaning<sp/>the<sp/>configuration<sp/>is<sp/>unchanged</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>but<sp/>the<sp/>peripheral<sp/>cannot<sp/>interrupt<sp/>or<sp/>act<sp/>on<sp/>messages</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Send<sp/>readies<sp/>the<sp/>message<sp/>to<sp/>be<sp/>sent<sp/>when<sp/>the<sp/>CAN<sp/>peripheral<sp/>has</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>a<sp/>chance<sp/>to<sp/>send<sp/>it<sp/>(puts<sp/>it<sp/>into<sp/>a<sp/>queue)</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>Recv<sp/>reads<sp/>a<sp/>message<sp/>(reads<sp/>from<sp/>a<sp/>queue<sp/>depending<sp/>on<sp/>ID)</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>How<sp/>to<sp/>Use<sp/>This<sp/>Driver:</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>Init<sp/>to<sp/>initialize<sp/>the<sp/>CAN<sp/>peripheral</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>Start<sp/>to<sp/>activate<sp/>the<sp/>CAN<sp/>peripheral</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>Send,<sp/>Recv,<sp/>Stop,<sp/>Start</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>DeInit<sp/>to<sp/>deinitialize</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>Init<sp/>...</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>Notes<sp/>for<sp/>usage:</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>CAN2<sp/>is<sp/>usually<sp/>a<sp/>slave<sp/>CAN,<sp/>meaning<sp/>that<sp/>it<sp/>shares</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>transistors<sp/>with<sp/>CAN1,<sp/>meaning<sp/>for<sp/>CAN2<sp/>to<sp/>work,<sp/>CAN1</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>must<sp/>be<sp/>initialized.<sp/>Thus,<sp/>make<sp/>sure<sp/>CAN1<sp/>is<sp/>initialized</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>before<sp/>CAN2<sp/>is<sp/>initialized.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>CAN2<sp/>usually<sp/>shares<sp/>the<sp/>filter<sp/>banks<sp/>with<sp/>CAN1,<sp/>since<sp/>it</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>is<sp/>a<sp/>slave<sp/>CAN.<sp/>Thus,<sp/>consider<sp/>the<sp/>filter<sp/>configs<sp/>you<sp/>pass</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>to<sp/>the<sp/>can_init<sp/>function,<sp/>when<sp/>initializing<sp/>CAN1<sp/>and<sp/>CAN2.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>CAN3<sp/>is<sp/>usually<sp/>a<sp/>master<sp/>CAN,<sp/>meaning<sp/>you<sp/>don&apos;t<sp/>have<sp/>to<sp/></highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>worry<sp/>about<sp/>sharing.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>This<sp/>driver<sp/>uses<sp/>a<sp/>macro<sp/>to<sp/>define<sp/>which<sp/>entries<sp/>a<sp/>CAN</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>interface<sp/>should<sp/>recieve<sp/>on.<sp/>Look<sp/>at<sp/>can1_recv_entries.h</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>for<sp/>an<sp/>example.<sp/>Make<sp/>sure<sp/>these<sp/>entries<sp/>line<sp/>up<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>filter<sp/>config.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>code<sp/>for<sp/>can<sp/>driver</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_ERR,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unsuccessful<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_OK,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_SENT,<sp/><sp/></highlight><highlight class="comment">//<sp/>successful<sp/>send</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_RECV,<sp/><sp/></highlight><highlight class="comment">//<sp/>successful<sp/>recieve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>CAN_EMPTY,<sp/></highlight><highlight class="comment">//<sp/>recieved<sp/>nothing<sp/>with<sp/>no<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">}<sp/>can_status_t;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>handlers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CAN1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>CAN_HandleTypeDef*<sp/>hcan1;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CAN1<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CAN2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>CAN_HandleTypeDef*<sp/>hcan2;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CAN2<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CAN3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>CAN_HandleTypeDef*<sp/>hcan3;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CAN3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">can_status_t<sp/>can_init(CAN_HandleTypeDef*<sp/>handle,<sp/>CAN_FilterTypeDef*<sp/>filter);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">can_status_t<sp/>can_deinit(CAN_HandleTypeDef*<sp/>handle);</highlight></codeline>
<codeline lineno="70"><highlight class="normal">can_status_t<sp/>can_start(CAN_HandleTypeDef*<sp/>handle);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">can_status_t<sp/>can_stop(CAN_HandleTypeDef*<sp/>handle);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">can_status_t<sp/>can_send(CAN_HandleTypeDef*<sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CAN_TxHeaderTypeDef*<sp/>header,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>data[],<sp/>TickType_t<sp/>delay_ticks);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">can_status_t<sp/>can_recv(CAN_HandleTypeDef*<sp/>handle,<sp/>uint16_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>CAN_RxHeaderTypeDef*<sp/>header,<sp/>uint8_t<sp/>data[],<sp/>TickType_t<sp/>delay_ticks);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CAN_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="bsp/Inc/CAN.h"/>
  </compounddef>
</doxygen>
