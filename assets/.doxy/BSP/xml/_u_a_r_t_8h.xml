<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="_u_a_r_t_8h" kind="file" language="C++">
    <compoundname>UART.h</compoundname>
    <includes local="yes">stm32xx_hal.h</includes>
    <includedby refid="_u_a_r_t_8c" local="yes">bsp/Src/UART.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>bsp/Inc/UART.h</label>
        <link refid="_u_a_r_t_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stm32xx_hal.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="_u_a_r_t_8h_1af7d6a356f1601c95992ab6990320fd35" prot="public" static="no" strong="no">
        <type></type>
        <name>uart_status_t</name>
        <enumvalue id="_u_a_r_t_8h_1af7d6a356f1601c95992ab6990320fd35a6a641fc3fa375d4bf149fb18fc290b55" prot="public">
          <name>UART_ERR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_u_a_r_t_8h_1af7d6a356f1601c95992ab6990320fd35a525187963c0aaa465f2a35b30b894d07" prot="public">
          <name>UART_OK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_u_a_r_t_8h_1af7d6a356f1601c95992ab6990320fd35a9928134997b763cbf346c8f3e14d9128" prot="public">
          <name>UART_SENT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_u_a_r_t_8h_1af7d6a356f1601c95992ab6990320fd35acfb8d3a96884efae4bd347830bd8a4c4" prot="public">
          <name>UART_RECV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_u_a_r_t_8h_1af7d6a356f1601c95992ab6990320fd35ac2ecba679f3dca11555b66d448198d0c" prot="public">
          <name>UART_EMPTY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="bsp/Inc/UART.h" line="27" column="1" bodyfile="bsp/Inc/UART.h" bodystart="27" bodyend="33"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="_u_a_r_t_8h_1a1847d0a7e7670fccc3a7ffac3ba1e016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uart_status_t</type>
        <definition>uart_status_t uart_init</definition>
        <argsstring>(UART_HandleTypeDef *handle)</argsstring>
        <name>uart_init</name>
        <param>
          <type>UART_HandleTypeDef *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Initializes the UART peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the UART handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uart_status_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="bsp/Inc/UART.h" line="57" column="15" bodyfile="bsp/Src/UART.c" bodystart="403" bodyend="514" declfile="bsp/Inc/UART.h" declline="57" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t_8h_1a3e4de921d10fbf0a69f2e9466530e732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uart_status_t</type>
        <definition>uart_status_t uart_deinit</definition>
        <argsstring>(UART_HandleTypeDef *handle)</argsstring>
        <name>uart_deinit</name>
        <param>
          <type>UART_HandleTypeDef *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Deinitializes the UART peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the UART handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uart_status_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="bsp/Inc/UART.h" line="58" column="15" bodyfile="bsp/Src/UART.c" bodystart="522" bodyend="568" declfile="bsp/Inc/UART.h" declline="58" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t_8h_1a71553a13e21823d5ca910beb2abacb32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uart_status_t</type>
        <definition>uart_status_t uart_send</definition>
        <argsstring>(UART_HandleTypeDef *handle, const uint8_t *data, uint8_t length, TickType_t delay_ticks)</argsstring>
        <name>uart_send</name>
        <param>
          <type>UART_HandleTypeDef *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>TickType_t</type>
          <declname>delay_ticks</declname>
        </param>
        <briefdescription>
<para>Transmits data over UART. If transmission is in progress, data will be queued in internal TX queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the data buffer that will be written/transmitted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>of the buffer that will be written/transmitted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay_ticks</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ticks to wait for data to be transmitted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uart_status_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="bsp/Inc/UART.h" line="59" column="15" bodyfile="bsp/Src/UART.c" bodystart="603" bodyend="687" declfile="bsp/Inc/UART.h" declline="59" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="_u_a_r_t_8h_1aa8ffbc96e17f61846c7b405b69488f18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uart_status_t</type>
        <definition>uart_status_t uart_recv</definition>
        <argsstring>(UART_HandleTypeDef *handle, uint8_t *data, uint8_t length, TickType_t delay_ticks)</argsstring>
        <name>uart_recv</name>
        <param>
          <type>UART_HandleTypeDef *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>TickType_t</type>
          <declname>delay_ticks</declname>
        </param>
        <briefdescription>
<para>Reads data from the user-provided RX queue. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>huart</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the UART handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the data buffer that will be read into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>of the buffer that will be read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay_ticks</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ticks to wait for data to be received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uart_status_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="bsp/Inc/UART.h" line="60" column="15" bodyfile="bsp/Src/UART.c" bodystart="697" bodyend="756" declfile="bsp/Inc/UART.h" declline="60" declcolumn="15"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>UART_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UART_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stm32xx_hal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(UART4)<sp/>&amp;&amp;<sp/>!defined(USART1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#error<sp/>&quot;[CONFIG]<sp/>UART<sp/>not<sp/>enabled<sp/>on<sp/>this<sp/>chip.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>UART4<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Function<sp/>Descriptions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Init<sp/>initializes<sp/>the<sp/>UART<sp/>peripheral<sp/>given<sp/>the<sp/>configuration</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>DeInit<sp/>deinitializes<sp/>the<sp/>UART<sp/>peripheral<sp/>meaning<sp/>the<sp/>configuration<sp/>is<sp/>reset</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>Send<sp/>queues<sp/>data<sp/>to<sp/>be<sp/>transmitted<sp/>when<sp/>the<sp/>UART<sp/>peripheral<sp/>is<sp/>available</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>Recv<sp/>reads<sp/>length<sp/>bytes<sp/>of<sp/>received<sp/>data<sp/>from<sp/>the<sp/>RX<sp/>queue</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>How<sp/>to<sp/>Use<sp/>This<sp/>Driver:</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>1.<sp/>uart_init<sp/>to<sp/>initialize<sp/>the<sp/>UART<sp/>peripheral</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>2.<sp/>uart_send/uart_recv<sp/>operations</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>3.<sp/>uart_deinit<sp/>to<sp/>deinitialize</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>-<sp/>The<sp/>function<sp/>HAL_UART_MspGPIOInit<sp/>and<sp/>HAL_UART_MspGPIODeInit<sp/>must<sp/>be<sp/>overriden<sp/>with<sp/>the<sp/>user&apos;s<sp/>implementation<sp/>of<sp/>initializing/deinitializing<sp/>the<sp/>GPIO<sp/>pins<sp/>for<sp/>the<sp/>selected<sp/>peripheral.<sp/>This<sp/>includes<sp/>initializing<sp/>the<sp/>GPIO<sp/>Clk<sp/>and<sp/>claling<sp/>HAL_GPIO_Init<sp/>on<sp/>the<sp/>correct<sp/>GPIO_InitTypeDef<sp/>structure.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>-<sp/>For<sp/>now,<sp/>a<sp/>UART<sp/>peripheral<sp/>needs<sp/>to<sp/>be<sp/>contained<sp/>to<sp/>one<sp/>task<sp/>as<sp/>only<sp/>one<sp/>receive<sp/>queue<sp/>exists<sp/>for<sp/>each.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>codes<sp/>for<sp/>UART<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>UART_ERR,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>UART_OK,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>UART_SENT,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>UART_RECV,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>UART_EMPTY,</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}<sp/>uart_status_t;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>uart<sp/>handlers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>UART4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UART_HandleTypeDef*<sp/>huart4;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>UART4<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>UART5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UART_HandleTypeDef*<sp/>huart5;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>UART5<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USART1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UART_HandleTypeDef*<sp/>husart1;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USART1<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USART2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UART_HandleTypeDef*<sp/>husart2;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USART2<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USART3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UART_HandleTypeDef*<sp/>husart3;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USART3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Function<sp/>prototypes<sp/>with<sp/>consistent<sp/>parameters<sp/>and<sp/>return<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">uart_status_t<sp/>uart_init(UART_HandleTypeDef*<sp/>handle);<sp/></highlight><highlight class="comment">//<sp/>Create<sp/>queue<sp/>at<sp/>compile<sp/>time,<sp/>User<sp/>passes<sp/>in<sp/>the<sp/>size<sp/>of<sp/>the<sp/>queue<sp/>they<sp/>want</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">uart_status_t<sp/>uart_deinit(UART_HandleTypeDef*<sp/>handle);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">uart_status_t<sp/>uart_send(UART_HandleTypeDef*<sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>data,<sp/>uint8_t<sp/>length,<sp/>TickType_t<sp/>delay_ticks);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">uart_status_t<sp/>uart_recv(UART_HandleTypeDef*<sp/>handle,<sp/>uint8_t*<sp/>data,<sp/>uint8_t<sp/>length,<sp/>TickType_t<sp/>delay_ticks);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>UART_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="bsp/Inc/UART.h"/>
  </compounddef>
</doxygen>
