/**
 * @file can_utils.h
 * @brief Header file for CAN message utilities.
 *
 * @details
 * This file provides macros and enumerations to assist in parsing and interpreting
 * CAN messages. It is auto-generated by dbc-to-c.py, and any modifications should
 * be made in the DBC file to ensure consistency.
 *
 * The following macros and enumerations are available:
 */

/**
 * @def CANUTILS_[message_name]
 * @brief Message Macros
 * 
 * Maps CAN message names to their corresponding frame IDs.
 *
 * Example usage:
 * @code
 * CANUTILS_Heartbeat --> 0x650
 * @endcode
 */

/**
 * @def CANUTIL_GET_VALUE_[signal_name](*can_msg_arr)
 * @brief Signal Extraction Macros
 * 
 * Extracts the signal value from an 8-byte CAN message. Requires a pointer
 * to the data array for the message.
 * 
 * Example usage:
 * @code
 * uint8_t can_message_arr[8];
 * int boost_enable = CANUTIL_GET_VALUE_BoostEnable(*can_message_arr);
 * @endcode
 */

/**
 * @typedef canutil_[signal_name]_values
 * @brief Signal Value Enums
 * 
 * Defines enumerations that represent possible values for specific signals.
 *
 * Example:
 * @code
 * typedef enum {
 *     OFF = 0,
 *     ON = 1
 * } canutil_UI_Mode_vals
 *
 * canutil_UI_Mode_vals mode = OFF;
 * @endcode
 */

#define CANUTIL_BPS_Trip 0x2

#define CANUTIL_BPS_Trip_MSG_LENGTH 1 

#define CANUTIL_GET_VALUE_BPS_Trip(d) ((*( (uint64_t *) d ) & 0x2) >> 1)
#define CANUTIL_BPS_Contactor_State 0x102

#define CANUTIL_BPS_Contactor_State_MSG_LENGTH 1 

#define CANUTIL_GET_VALUE_Array_Contactor(d) ((*( (uint64_t *) d ) & 0x2) >> 1)
#define CANUTIL_GET_VALUE_HV_Negative_Contactor(d) ((*( (uint64_t *) d ) & 0x80) >> 7)
#define CANUTIL_GET_VALUE_HV_Positive_Contactor(d) ((*( (uint64_t *) d ) & 0x40) >> 6)
#define CANUTIL_Charging_Enable 0x10c

#define CANUTIL_Charging_Enable_MSG_LENGTH 1 

#define CANUTIL_GET_VALUE_Charge_Enable(d) ((*( (uint64_t *) d ) & 0x2) >> 1)
#define CANUTIL_BPS_All_Clear 0x101

#define CANUTIL_BPS_All_Clear_MSG_LENGTH 1 

#define CANUTIL_GET_VALUE_BPS_All_Clear(d) ((*( (uint64_t *) d ) & 0x2) >> 1)
#define CANUTIL_WDog_Triggered 0x107

#define CANUTIL_WDog_Triggered_MSG_LENGTH 1 

#define CANUTIL_GET_VALUE_WDog_Triggered(d) ((*( (uint64_t *) d ) & 0x2) >> 1)
#define CANUTIL_BPS_Voltage_Array 0x104

#define CANUTIL_BPS_Voltage_Array_MSG_LENGTH 5 

#define CANUTIL_GET_VALUE_Voltage_Index(d) ((*( (uint64_t *) d ) & 0xff00) >> 8)
#define CANUTIL_GET_VALUE_Module_Voltage(d) ((*( (uint64_t *) d ) & 0xffffffff000000) >> 24)
#define CANUTIL_BPS_Temperature_Array 0x105

#define CANUTIL_BPS_Temperature_Array_MSG_LENGTH 5 

#define CANUTIL_GET_VALUE_Temperature_Idx(d) ((*( (uint64_t *) d ) & 0xff00) >> 8)
#define CANUTIL_GET_VALUE_Module_Temperature(d) ((*( (uint64_t *) d ) & 0xffffffff000000) >> 24)
#define CANUTIL_BPS_SOC 0x106

#define CANUTIL_BPS_SOC_MSG_LENGTH 4 

#define CANUTIL_GET_VALUE_SOC(d) ((*( (uint64_t *) d ) & 0xffffffff00000000) >> 32)
#define CANUTIL_BPS_Voltage_Summary 0x10d

#define CANUTIL_BPS_Voltage_Summary_MSG_LENGTH 8 

#define CANUTIL_GET_VALUE_Pack_Voltage(d) ((*( (uint64_t *) d ) & 0xffffff000000) >> 24)
#define CANUTIL_GET_VALUE_Voltage_range(d) ((*( (uint64_t *) d ) & 0xffffff0000000000) >> 40)
#define CANUTIL_GET_VALUE_Time_Since_Voltage_Update(d) ((*( (uint64_t *) d ) & 0xffff0000) >> 16)
#define CANUTIL_BPS_Temperature_Summary 0x108

#define CANUTIL_BPS_Temperature_Summary_MSG_LENGTH 8 

#define CANUTIL_GET_VALUE_Average_Temp(d) ((*( (uint64_t *) d ) & 0xffffff000000) >> 24)
#define CANUTIL_GET_VALUE_Temperature_Range(d) ((*( (uint64_t *) d ) & 0xffffff0000000000) >> 40)
#define CANUTIL_GET_VALUE_Time_Since_Temp_Update(d) ((*( (uint64_t *) d ) & 0xffff0000) >> 16)
#define CANUTIL_Supplemental_Voltage 0x10b

#define CANUTIL_Supplemental_Voltage_MSG_LENGTH 2 

#define CANUTIL_GET_VALUE_Supplemental_Battery_Voltage(d) ((*( (uint64_t *) d ) & 0xffff0000) >> 16)
