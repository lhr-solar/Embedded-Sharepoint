{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Embedded Sharepoint Documentation","text":"<p>Welcome to the Embedded Sharepoint! Embedded-Sharepoint contains the shared embedded files to build and develop for our custom STM32 PCBs.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#cloning-the-repository","title":"Cloning the repository","text":"<p>To clone the repository, run </p> <pre><code>git clone git@github.com:lhr-solar/Embedded-Sharepoint.git --recursive\n</code></pre>"},{"location":"#directory-structure","title":"Directory Structure","text":""},{"location":"#command-usage","title":"Command Usage","text":"<p>The Makefile in the top level directory compiles all needed files for the STM32, it is not meant to be called directly, instead you must call it from a different Makefile</p>"},{"location":"#running-tests","title":"Running tests","text":"<p>In the test/ directory there is a Makefile meant for just running test files. Every test file should end with <code>_test</code>  To run a test do:</p> <pre><code>make TEST=[name of test file without _test_ and the .c extension] PROJECT_TARGET=[name of the STM32 you want to compile for]\n\n# For example:\nmake TEST=blinky PROJECT_TARGET=stm32f413rht\n# This compiles the blinky_test.c test for the STM32F413RHT\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>See our Issues to see what you can work on! Once you're ready for a review please open a pull request to merge into main. Pull Requests explained </p>"},{"location":"#wsl","title":"WSL","text":""},{"location":"#usb-passthrough","title":"USB PassThrough","text":""},{"location":"#pass-usb-devices","title":"Pass USB Devices","text":"<p>In PowerShell administrator: </p> <pre><code>usbipd list\nusbipd bind --busid &lt;busid&gt;\nusbipd attach --wsl --busid &lt;busid&gt;\n</code></pre>"},{"location":"#porting","title":"Porting","text":"<p>A valid port of an STM requires three things:</p> <ol> <li>A directory under stm/stm32f4xx or stm/stm32l4xx must be generated with the generic name of the microcontroller. This is typically stm32 followed by four characters specifying the series and line (stm32f413, stm32l431, etc.)</li> <li>A linker script under the aforementioned directory. This can be autogenerated by STM32CubeMX or grabbed from the internet. The name should take the form of STM32*_FLASH.ld, and should include the full name of the processor (STM32F413RHTx_FLASH.ld, STM32L431CBTx_FLASH.ld, etc.)</li> <li>A startup assembly file including the vector table and some basic handlers (most important being Reset_Handler). This can be autogenerated by STM32CubeMX or grabbed from the internet. The name should take the form of startup_stm32 followed by the four characters specifying the series and line and then xx (startup_stm32f413xx.s, startup_stm32l431xx.s)</li> <li>A configuration file with the exact MCU name (e.g. stm32l432kcu.cfg) specifying which BSP modules to disable in a space separated list like so:     <code>BSP_DISABLE=CAN UART ADC</code>     Please check which peripherals actually exist on your MCU, or be prepared for strange build errors.</li> </ol> <p>The Makefile will expect this exact naming structure, so please ensure you've set it up properly. If everything goes to plan, you should be able to build with PROJECT_TARGET set to the full name of the port.</p>"},{"location":"CubeMX/","title":"CubeMX","text":"<p>STM32 CubeMX is a graphical tool made by STMicro to help in creating STM32 hardware and software. While the generated code is not always optimal, CubeMX is extremely useful for figuring out pin alternate functions, setting up clock trees, and quickly enabling peripherals.</p>"},{"location":"CubeMX/#1-installing-cubemx","title":"1. Installing CubeMX","text":"<p>Download CubeMX here.</p>"},{"location":"CubeMX/#2-using-the-cubemx-microcontroller-editor","title":"2. Using the CubeMX Microcontroller Editor","text":"<ol> <li>Open \"STM32CubeMX\".  </li> <li>Press \"Access to MCU Selector\".  </li> <li>Search for your MCU part number (e.g. STM32F413RHT)</li> <li>Click \"Start Project\" and CubeMX will generate a project workspace.</li> </ol> Note: This is the configuration view for the STM32F413RHT so your pinout might look slightly different."},{"location":"CubeMX/#3-editing-peripheral-settings","title":"3. Editing Peripheral Settings","text":"<p>This section will show you how to change configurations for peripherals you wish to interface.</p>"},{"location":"CubeMX/#31-selecting-a-peripheral","title":"3.1 Selecting a Peripheral","text":"<ul> <li>On the left-hand side of CubeMX, locate the pane with the \"Categories\" tab selected.</li> <li>Toggle the dropdowns to see the peripherals that are supported on your MCU:</li> </ul> <p>Analog - ADCs, DACs Timers - TIM1, TIM2, ... Connectivity - I\u00b2C, USART / UART, SPI </p> <ul> <li>Now, you can select the peripherals you want to enable (e.g., USART1, I2C1, TIM2, etc.).  </li> <li>CubeMX will automatically assign the required pins on the microcontroller diagram.  </li> <li>If there are conflicts (e.g., two peripherals trying to use the same pin), CubeMX will show a warning and let you reassign pins manually.  </li> <li>Hover over the microcontroller diagram and click on a pin to change its function or remap it.</li> </ul> Yay, we can configure our peripherals now!"},{"location":"CubeMX/#32-configuring-a-peripheral","title":"3.2 Configuring a Peripheral","text":"<ul> <li>Clicking a specific peripheral opens a settings window for that peripheral.  </li> <li> <p>The \"Mode\" and \"Configuration\" windows can be used to change configurations for a specific peripheral</p> </li> <li> <p>Examples of configurations:   \u00a0\u00a0-  USART: baud rate, word length, stop bits, parity, DMA options   \u00a0\u00a0-  Timers: PWM mode, clock source, prescaler values, channel mappings   \u00a0\u00a0-  ADC: resolution, sampling time, number of channels, trigger source</p> </li> <li> <p>You can also configure NVIC interrupts and enable/disable them from this window.</p> </li> </ul>"},{"location":"CubeMX/#33-clock-configuration","title":"3.3 Clock Configuration","text":"<ul> <li>Go to the \"Clock Configuration\" tab.  </li> <li>Set up the input oscillator (HSI, HSE, LSE) and PLL settings.  </li> <li>To change derived clock speeds enter your desired value and CubeMX will calculate the necessary prescalers to get there.</li> <li>If you exceed limits, CubeMX will flag the error in red.</li> </ul> \u23f0\u23f0\u23f0"},{"location":"CubeMX/#4-generating-code","title":"4. Generating Code","text":"<ol> <li>Press the \"Project Manager\" tab.  </li> <li>Under \"Code Generator\" you can specify project name, location, and toolchain (e.g., STM32CubeIDE, Keil, IAR, or Makefile).  </li> <li>Click \"Generate Code\" (you may have to install firmware packages for the MCU \ud83d\ude34).  </li> <li>Open the generated project in your chosen IDE and enjoy!</li> </ol>"},{"location":"DBC/","title":"Table of Contents","text":"<ul> <li>Bps (daybreak)</li> <li>Contactor</li> <li>Controls</li> <li>Prohelion Wavesculptor22</li> <li>Tpee Mppt[a]</li> <li>Tpee Mppt[b]</li> </ul>"},{"location":"DBC/#bps-daybreakdbc","title":"bps (Daybreak).dbc","text":"<p>GitHub Link</p>"},{"location":"DBC/#messages","title":"Messages","text":"ID Name DLC Signals 0x2 BPS_Trip 1 BPS_Trip 0x101 BPS_All_Clea 1 BPS_All_Clear 0x102 BPS_Contactor_State 1 HV_Contactor, Array_Contactor 0x103 BPS_Current 4 Current 0x104 BPS_Voltage_Array 5 Voltage_idx, Voltage_Value 0x105 BPS_Temperature_Array 5 Temperature_idx, Temperature_Value 0x106 BPS_SOC 4 SoC 0x107 BPS_WDog_Trigger 1 WDog_Trig 0x108 BPS_CAN_Error 1 BPS_CAN_Error 0x109 BPS_Command 8 BPS_Command 0x10B BPS_Supplemental_Voltage 2 Supplemental_Voltage 0x10C BPS_Charge_Enabled 1 Charge_Enabled 0x10D BPS_Voltage_Summary 8 Pack_Voltage, Voltage_Range, Voltage_Timestamp 0x10E BPS_Temperature_Summary 8 Average_Temp, Temperature_Range, Temperature_Timestamp 0x10F BPS_Fault_State 1 BPS_Fault_State"},{"location":"DBC/#signals","title":"Signals","text":"Name Message Bits [start:end] Length Factor Offset Min Max Unit BPS_Trip BPS_Trip [0:0] 1 1 0 0 1 BPS_All_Clear BPS_All_Clea [0:0] 1 1 0 0 1 HV_Contactor BPS_Contactor_State [2:2] 1 1 0 0 1 Array_Contactor BPS_Contactor_State [0:0] 1 1 0 0 1 Current BPS_Current [0:31] 32 1 0 -20000 100000 mA Voltage_idx BPS_Voltage_Array [0:7] 8 1 0 0 31 Voltage_Value BPS_Voltage_Array [8:39] 32 1 0 0 1000000 mV Temperature_idx BPS_Temperature_Array [0:7] 8 1 0 0 31 Temperature_Value BPS_Temperature_Array [8:39] 32 1 0 0 1000000 mC SoC BPS_SOC [0:31] 32 1 0 0 100 % WDog_Trig BPS_WDog_Trigger [0:0] 1 1 0 0 1 BPS_CAN_Error BPS_CAN_Error [0:0] 1 1 0 0 1 BPS_Command BPS_Command [0:31] 32 1 0 None None Supplemental_Voltage BPS_Supplemental_Voltage [0:15] 16 1 0 0 65535 mV Charge_Enabled BPS_Charge_Enabled [0:0] 1 1 0 0 1 Pack_Voltage BPS_Voltage_Summary [0:23] 24 1 0 0 16777215 mV Voltage_Range BPS_Voltage_Summary [24:47] 24 1 0 0 16777215 mV Voltage_Timestamp BPS_Voltage_Summary [48:63] 16 1 0 0 65535 ms Average_Temp BPS_Temperature_Summary [0:23] 24 1 0 None None mC Temperature_Range BPS_Temperature_Summary [24:47] 24 1 0 None None mC Temperature_Timestamp BPS_Temperature_Summary [48:63] 16 1 0 None None ms BPS_Fault_State BPS_Fault_State [0:7] 8 1 0 0 12"},{"location":"DBC/#contactordbc","title":"contactor.dbc","text":"<p>GitHub Link</p>"},{"location":"DBC/#messages_1","title":"Messages","text":"ID Name DLC Signals 0x401 Precharge_Timeout 1 Motor_Precharge_Timeout, Array_Precharge_Timeout 0x400 Contactor_Sense 2 Actual_Motor_Sense, Expected_Motor_Sense, Motor_Sense_Fault, Motor_Precharge_Sense, Expected_Motor_Precharge_Sense, Motor_Precharge_Sense_Fault, Array_Precharge_Sense, Expected_Array_Precharge_Sense, Array_Prechage_Sense_Fault"},{"location":"DBC/#signals_1","title":"Signals","text":"Name Message Bits [start:end] Length Factor Offset Min Max Unit Motor_Precharge_Timeout Precharge_Timeout [0:0] 1 1 0 0 1 Array_Precharge_Timeout Precharge_Timeout [1:1] 1 1 0 None None Actual_Motor_Sense Contactor_Sense [0:0] 1 1 0 0 1 Expected_Motor_Sense Contactor_Sense [1:1] 1 1 0 None None Motor_Sense_Fault Contactor_Sense [2:2] 1 1 0 0 1 Motor_Precharge_Sense Contactor_Sense [3:3] 1 1 0 0 1 Expected_Motor_Precharge_Sense Contactor_Sense [4:4] 1 1 0 0 1 Motor_Precharge_Sense_Fault Contactor_Sense [5:5] 1 1 0 0 1 Array_Precharge_Sense Contactor_Sense [6:6] 1 1 0 0 1 Expected_Array_Precharge_Sense Contactor_Sense [7:7] 1 1 0 0 1 Array_Prechage_Sense_Fault Contactor_Sense [8:8] 1 1 0 0 1"},{"location":"DBC/#controlsdbc","title":"controls.dbc","text":"<p>GitHub Link</p>"},{"location":"DBC/#messages_2","title":"Messages","text":"ID Name DLC Signals 0x581 IO_State 3 Acceleration_Percentage, Brake_Percentage, IGN_Array, IGN_Motor, Regen_SW, Forward_Gear, Reverse_Gear, Cruz_EN, Cruz_Set, Brake_Light 0x583 Controls_Fault 1 Controls_Fault, Motor_Controller_Fault, BPS_Fault, Pedals_Fault, CarCAN_Fault, Internal_Controls_Fault, OS_Fault, Lakshay_Fault 0x584 Motor_Controller_Safe 1 Motor_Safe, Motor_Controller_Error 0x221 Motor_Drive_Command 8 Motor_Velocity_Setpoint, Motor_Current_Setpoint 0x222 Motor_Power_Command 8 Motor_Power_Setpoint 0x585 Pedals_Raw_Voltage 4 Brake_Raw, Accel_Raw"},{"location":"DBC/#signals_2","title":"Signals","text":"Name Message Bits [start:end] Length Factor Offset Min Max Unit Acceleration_Percentage IO_State [0:7] 8 1 0 0 100 Percentage Brake_Percentage IO_State [8:15] 8 1 0 0 100 Percentage the brake is pressed IGN_Array IO_State [16:16] 1 1 0 0 1 Array Ignition On IGN_Motor IO_State [17:17] 1 1 0 0 1 Motor Ignition On Regen_SW IO_State [18:18] 1 1 0 0 1 Regen Switched On Forward_Gear IO_State [19:19] 1 1 0 0 1 Forward switch Reverse_Gear IO_State [20:20] 1 1 0 0 1 Reverse switch Cruz_EN IO_State [21:21] 1 1 0 0 1 Cruise Enable Cruz_Set IO_State [22:22] 1 1 0 0 1 Cruise Set Brake_Light IO_State [23:23] 1 1 0 0 1 Brakelight state Controls_Fault Controls_Fault [0:0] 1 1 0 0 1 Motor_Controller_Fault Controls_Fault [1:1] 1 1 0 0 1 BPS_Fault Controls_Fault [2:2] 1 1 0 0 1 Pedals_Fault Controls_Fault [3:3] 1 1 0 None None CarCAN_Fault Controls_Fault [4:4] 1 1 0 0 1 Internal_Controls_Fault Controls_Fault [5:5] 1 1 0 0 1 OS_Fault Controls_Fault [6:6] 1 1 0 0 1 Lakshay_Fault Controls_Fault [7:7] 1 1 0 0 1 Motor_Safe Motor_Controller_Safe [0:0] 1 1 0 0 1 Motor_Controller_Error Motor_Controller_Safe [1:1] 1 1 0 0 1 Motor_Velocity_Setpoint Motor_Drive_Command [0:31] 32 1 0 None None rpm Motor_Current_Setpoint Motor_Drive_Command [32:63] 32 1 0 None None % Motor_Power_Setpoint Motor_Power_Command [32:63] 32 1 0 None None % Brake_Raw Pedals_Raw_Voltage [0:14] 15 1 0 0 3300 mV Accel_Raw Pedals_Raw_Voltage [16:30] 15 1 0 0 3300 mV"},{"location":"DBC/#prohelion_wavesculptor22dbc","title":"prohelion_wavesculptor22.dbc","text":"<p>GitHub Link</p>"},{"location":"DBC/#messages_3","title":"Messages","text":"ID Name DLC Signals 0x240 IDInfo 8 TritiumID, SerialNumber 0x241 Status 8 LimitOutputVoltagePWM, LimitMotorCurrent, LimitVelocity, LimitBusCurrent, LimitBusVoltageUpper, LimitBusVoltageLower, LimitIpmOrMotorTemp, LimitReserved, ErrorHardwareOverCurrent, ErrorSoftwareOverCurrent, ErrorDcBusOverVoltage, ErrorBadMotorPositionHallSeq, ErrorWatchdogCausedLastReset, ErrorConfigRead, Error15vRailUnderVoltage, ErrorDesaturationFault, ErrorMotorOverSpeed, ErrorReserved, ActiveMotor, TxErrorCount, RxErrorCount 0x242 BusMeasurement 8 BusVoltage, BusCurrent 0x243 VelocityMeasurement 8 MotorVelocity, VehicleVelocity 0x244 PhaseCurrentMeasurement 8 PhaseCurrentB, PhaseCurrentC 0x245 MotorVoltageVectorMeasurement 8 Vq, Vd 0x246 MotorCurrentVectorMeasurement 8 Iq, Id 0x247 BackEMFMeasurementPrediction 8 BEMFq, BEMFd 0x248 VoltageRail15VMeasurement 8 ReservedSupply15V, Supply15V 0x249 VoltageRail3V31V9Measurement 8 Supply1V9, Supply3V3 0x24A Reserved0A 8 Reserved0A0, Reserved0A1 0x24B HeatsinkMotorTempMeasurement 8 MotorTemp, HeatsinkTemp 0x24C DspBoardTempMeasurement 8 DspBoardTemp, ReservedDspBoardTemp 0x24D Reserved0D 8 Reserved0D0, Reserved0D1 0x24E OdometerBusAhMeasurement 8 Odometer, DCBusAh 0x257 SlipSpeedMeasurement 8 SlipSpeed, ReservedSlipSpeed"},{"location":"DBC/#signals_3","title":"Signals","text":"Name Message Bits [start:end] Length Factor Offset Min Max Unit TritiumID IDInfo [0:31] 32 1 0 None None SerialNumber IDInfo [32:63] 32 1 0 None None LimitOutputVoltagePWM Status [0:0] 1 1 0 0 1 On / Off LimitMotorCurrent Status [1:1] 1 1 0 0 1 On / Off LimitVelocity Status [2:2] 1 1 0 0 1 On / Off LimitBusCurrent Status [3:3] 1 1 0 0 1 On / Off LimitBusVoltageUpper Status [4:4] 1 1 0 0 1 On / Off LimitBusVoltageLower Status [5:5] 1 1 0 0 1 On / Off LimitIpmOrMotorTemp Status [6:6] 1 1 0 0 1 On / Off LimitReserved Status [7:15] 9 1 0 0 511 On / Off ErrorHardwareOverCurrent Status [16:16] 1 1 0 0 1 On / Off ErrorSoftwareOverCurrent Status [17:17] 1 1 0 0 1 On / Off ErrorDcBusOverVoltage Status [18:18] 1 1 0 0 1 On / Off ErrorBadMotorPositionHallSeq Status [19:19] 1 1 0 0 1 On / Off ErrorWatchdogCausedLastReset Status [20:20] 1 1 0 0 1 On / Off ErrorConfigRead Status [21:21] 1 1 0 0 1 On / Off Error15vRailUnderVoltage Status [22:22] 1 1 0 0 1 On / Off ErrorDesaturationFault Status [23:23] 1 1 0 0 1 On / Off ErrorMotorOverSpeed Status [24:24] 1 1 0 0 1 On / Off ErrorReserved Status [25:31] 7 1 0 None None On / Off ActiveMotor Status [32:47] 16 1 0 None None TxErrorCount Status [48:55] 8 1 0 None None RxErrorCount Status [56:63] 8 1 0 None None BusVoltage BusMeasurement [0:31] 32 1 0 0 100 V BusCurrent BusMeasurement [32:63] 32 1 0 0 1000 A MotorVelocity VelocityMeasurement [0:31] 32 1 0 None None rpm VehicleVelocity VelocityMeasurement [32:63] 32 2.237 0 None None mph PhaseCurrentB PhaseCurrentMeasurement [0:31] 32 1 0 None None A_rms PhaseCurrentC PhaseCurrentMeasurement [32:63] 32 1 0 None None A_rms Vq MotorVoltageVectorMeasurement [0:31] 32 1 0 None None V Vd MotorVoltageVectorMeasurement [32:63] 32 1 0 None None V Iq MotorCurrentVectorMeasurement [0:31] 32 1 0 None None A Id MotorCurrentVectorMeasurement [32:63] 32 1 0 None None A BEMFq BackEMFMeasurementPrediction [0:31] 32 1 0 None None V BEMFd BackEMFMeasurementPrediction [32:63] 32 1 0 None None V ReservedSupply15V VoltageRail15VMeasurement [0:31] 32 1 0 None None Supply15V VoltageRail15VMeasurement [32:63] 32 1 0 None None V Supply1V9 VoltageRail3V31V9Measurement [0:31] 32 1 0 None None V Supply3V3 VoltageRail3V31V9Measurement [32:63] 32 1 0 None None V Reserved0A0 Reserved0A [0:31] 32 1 0 None None Reserved0A1 Reserved0A [32:63] 32 1 0 None None MotorTemp HeatsinkMotorTempMeasurement [0:31] 32 1 0 None None C HeatsinkTemp HeatsinkMotorTempMeasurement [32:63] 32 1 0 None None C DspBoardTemp DspBoardTempMeasurement [0:31] 32 1 0 None None C ReservedDspBoardTemp DspBoardTempMeasurement [32:63] 32 1 0 None None Reserved0D0 Reserved0D [0:31] 32 1 0 None None Reserved0D1 Reserved0D [32:63] 32 1 0 None None Odometer OdometerBusAhMeasurement [0:31] 32 1 0 None None m DCBusAh OdometerBusAhMeasurement [32:63] 32 1 0 None None Ah SlipSpeed SlipSpeedMeasurement [0:31] 32 1 0 None None Hz ReservedSlipSpeed SlipSpeedMeasurement [32:63] 32 1 0 None None"},{"location":"DBC/#tpee_mpptadbc","title":"tpee_mppt[A].dbc","text":"<p>GitHub Link</p>"},{"location":"DBC/#messages_4","title":"Messages","text":"ID Name DLC Signals 0x201 MPPT_32_0_Status 5 MPPT_Mode, MPPT_Fault, MPPT_Enabled, MPPT_AmbientTemperature, MPPT_HeatsinkTemperature 0x200 MPPT_32_0_Power 8 MPPT_Vin, MPPT_Iin, MPPT_Vout, MPPT_Iout 0x209 MPPT_32_0_SetMode 1 Boost_Enable"},{"location":"DBC/#signals_4","title":"Signals","text":"Name Message Bits [start:end] Length Factor Offset Min Max Unit MPPT_Mode MPPT_32_0_Status [0:7] 8 1 0 None None MPPT_Fault MPPT_32_0_Status [8:15] 8 1 0 None None MPPT_Enabled MPPT_32_0_Status [16:23] 8 1 0 None None MPPT_AmbientTemperature MPPT_32_0_Status [31:38] 8 1 0 -128 127 C MPPT_HeatsinkTemperature MPPT_32_0_Status [39:46] 8 1 0 -128 127 C MPPT_Vin MPPT_32_0_Power [7:22] 16 0.01 0 -327.68 327.67 V MPPT_Iin MPPT_32_0_Power [23:38] 16 0.0005 0 -16.384 16.3835 A MPPT_Vout MPPT_32_0_Power [39:54] 16 0.01 0 -327.68 327.67 V MPPT_Iout MPPT_32_0_Power [55:70] 16 0.0005 0 None None A Boost_Enable MPPT_32_0_SetMode [0:0] 1 1 0 0 1"},{"location":"DBC/#tpee_mpptbdbc","title":"tpee_mppt[B].dbc","text":"<p>GitHub Link</p>"},{"location":"DBC/#messages_5","title":"Messages","text":"ID Name DLC Signals 0x211 MPPT_33_0_Status 5 MPPT_Mode, MPPT_Fault, MPPT_Enabled, MPPT_AmbientTemperature, MPPT_HeatsinkTemperature 0x210 MPPT_33_0_Power 8 MPPT_Vin, MPPT_Iin, MPPT_Vout, MPPT_Iout 0x219 MPPT_33_0_SetMode 1 Boost_Enable"},{"location":"DBC/#signals_5","title":"Signals","text":"Name Message Bits [start:end] Length Factor Offset Min Max Unit MPPT_Mode MPPT_33_0_Status [0:7] 8 1 0 None None MPPT_Fault MPPT_33_0_Status [8:15] 8 1 0 None None MPPT_Enabled MPPT_33_0_Status [16:23] 8 1 0 None None MPPT_AmbientTemperature MPPT_33_0_Status [31:38] 8 1 0 -128 127 C MPPT_HeatsinkTemperature MPPT_33_0_Status [39:46] 8 1 0 -128 127 C MPPT_Vin MPPT_33_0_Power [7:22] 16 0.01 0 -327.68 327.67 V MPPT_Iin MPPT_33_0_Power [23:38] 16 0.0005 0 -16.384 16.3835 A MPPT_Vout MPPT_33_0_Power [39:54] 16 0.01 0 -327.68 327.67 V MPPT_Iout MPPT_33_0_Power [55:70] 16 0.0005 0 None None A Boost_Enable MPPT_33_0_SetMode [0:0] 1 1 0 0 1"},{"location":"FlashAndTheBug/","title":"Flashing and Debugging on an MCU","text":"<p>This page will walk you through how you can flash your C code on an MCU using Embedded Sharepoint!</p> <p>... and also debug it \ud83e\udee0</p> <p>\u2139\ufe0f Prerequisite :  Make sure you've added Embedded Sharepoint.</p>"},{"location":"FlashAndTheBug/#attaching-usb-devices","title":"Attaching USB devices","text":"<p>Assuming you're using WSL, when you plug in your Nucleo it won't automatically get recognized.</p> <p>You can verify this by running <code>lsusb</code>.</p> <p>To attach a USB device on WSL you need to install <code>usbipd-win</code>.</p> <ol> <li> <p>Go to the latest release.</p> </li> <li> <p>Select the <code>.msi</code> file, and download it. (You may get a warning asking you to confirm that you trust this download).</p> </li> <li> <p>Run the downloaded <code>usbipd-win_x.msi</code> installer file.</p> </li> </ol> <p>Once we have <code>usbipd</code> we can bind and attach USB devices.</p> <ol> <li>Open Powershell and \"Run as Administrator\".</li> <li>Run <code>usbipd list</code> to get a list of all USB buses.</li> <li>Locate the device called \"ST-Link Debug\" and note the \"BUSID\".</li> <li>Run <code>usbipd bind --busid &lt;BUSID&gt;</code>.</li> <li>Run <code>usbipd attach --wsl --busid &lt;BUSID&gt;</code> (must have an instance of WSL running).</li> </ol> <p>And you're good!</p> <p>Confirm all is well with <code>lsusb</code>.</p>"},{"location":"FlashAndTheBug/#hardware-interface","title":"Hardware Interface","text":"<p>Serial Wire Debug (SWD) is a two-wire protocol that is an alternative to JTAG. JTAG is the most common interface for debugging/accessing MCU registers, but it requires 4 pins to communicate while SWD only requires 2, so many ARM microcontrollers will use SWD to ease pin requirements.</p> <p>If you take a look at your STM32 Nucleo you should notice two sections on the board:</p> <p></p> Red ST-Link for Debugging Blue STM32 MCU and Peripherals"},{"location":"FlashAndTheBug/#st-link-connector","title":"ST-Link Connector","text":"<p>Your board may have the jumpers ON or OFF on the ST-Link Connector (CN2).</p> <p>ON - you are programming the INTERNAL STM32 MCU (Nucleo)</p> <p>OFF - you are programming the EXTERNAL STM32 MCU (Solar Board)</p> <p>Decide whether you need jumpers based on which MCU you are trying to program.</p> <p>\u2139\ufe0f If you're unsure, run <code>st-info --probe</code> to see the MCU you're flashing to.</p>"},{"location":"FlashAndTheBug/#swd-connector","title":"SWD Connector","text":"<p>When programming an external MCU (not on the Nucleo) the 6-pin SWD connector (CN4) on the ST-Link will be used. </p> <p>Here's the pinout for reference</p> Pin CN4 Designation 1 VDD_TARGET VDD from application 2 SWCLK SWD clock 3 GND Ground 4 SWDIO SWD data I/O 5 NRST RESET of target STM32 6 SWO Reserved <p>On our solar boards we have a SWD interface that looks like this</p> <p>After connecting the corresponding pins you'll be able to program the MCU on your board.</p>"},{"location":"FlashAndTheBug/#software-tooling","title":"Software Tooling","text":""},{"location":"FlashAndTheBug/#overview","title":"Overview","text":"<p>The OpenOCD and stlink packages are some software tools we use to flash and debug code on our board. They are two different options for doing the same thing (flashing and debugging via JTAG/SWD).</p> <ul> <li> <p>stlink is a software package developed by STMicroelectronics to interface with an ST-LINK device for programming and debugging purposes.</p> </li> <li> <p>OpenOCD runs a GDB server, which allows us to debug remote targets via GDB. It also lets us write to flash with some extra configuration.</p> </li> </ul> <p>We currently use the OpenOCD GDB server for debugging while using <code>st-flash</code>, a tool in the stlink package for flashing code.</p>"},{"location":"FlashAndTheBug/#implementation","title":"Implementation","text":"<p>Embedded Sharepoint contains Makefiles to simplify the process of flashing code on an MCU. These Makefiles directly call the <code>st-flash</code> command.</p> <p>On an STM32 MCU, flash memory starts at <code>0x8000000</code>.</p> <p></p> <p>After the Makefile compiles your source code into a binary (<code>.bin</code>), it writes to flash using</p> <pre> st-flash write $(BUILD_DIR)/$(TARGET).bin 0x8000000 </pre> <p>NOTE: We're not flashing the <code>.elf</code> file because it contains unnecessary debug symbols that we don't need to simply flash.</p>"},{"location":"FlashAndTheBug/#make-executables","title":"Make Executables","text":"<p>You can use the Makefile from the <code>test/</code> directory to flash files within the <code>tests/</code> directory.</p> <ol> <li> <p>Navigate to the <code>test/</code> directory.</p> </li> <li> <p>If you've set the environment variables mentioned in \"Adding Embedded Sharepoint\" then you can run <code>make TEST=&lt;testfile&gt;</code> where <code>tests/testfile.c</code> is your test.</p> </li> <li> <p>After your code has been compiled and linked you should see information regarding the <code>.elf</code> file created.</p> </li> </ol> <p></p> <p>If you don't see a similar message nor a <code>.elf</code> file in the <code>build/</code> directory, then look at your console output for a specific error traceback.</p>"},{"location":"FlashAndTheBug/#flash","title":"Flash","text":"<p>If you ran the previous section without error then you should have a <code>.bin</code> and a <code>.elf</code> in your <code>build/</code> corresponding to your target MCU.</p> <p>To flash</p> <ol> <li>Navigate to <code>test/</code></li> <li>Run <code>make flash</code></li> </ol> <p>... and you've flashed to the MCU!</p>"},{"location":"FlashAndTheBug/#debug","title":"Debug","text":""},{"location":"FlashAndTheBug/#gdb","title":"GDB","text":"<p>To debug we'll use OpenOCD. </p> <ol> <li>Navigate to the root directory of Embedded Sharepoint.</li> <li>Run <code>openocd -f openocd-stm32f4x.cfg</code> if you're programming an F4 MCU or the corresponding <code>..l4x.cfg</code> if you're programming an L4.</li> <li>You should see a message that a GDB server was started on port <code>3333</code>.</li> </ol> <p>Open a second terminal session to use GDB</p> <ol> <li>Run <code>gdb-multiarch build/(TARGET).elf</code>. If you aren't in root the filepath will look slightly different.</li> <li>Verify that GDB is using the debug symbols from the <code>.elf</code> file.</li> <li>Run <code>tar extended-remote :3333</code> to connect to the OpenOCD GDB server.</li> </ol> <p>Step through your code in GDB to analyze execution!</p>"},{"location":"FlashAndTheBug/#serial-monitoring","title":"Serial Monitoring","text":"<p>Another debugging option is serial monitoring. The <code>printf</code> method is integrated into Embedded-Sharepoint.</p> <ol> <li> <p>The <code>HAL_UART_MspGPIOInit()</code> function must be implemented with the proper GPIO initialization (RCC_CLK_ENABLE, GPIO struct filled in, HAL_GPIO_Init called).</p> </li> <li> <p>The <code>UART_HandleTypeDef</code> struct must be initialized with the proper settings before calling printf_init.</p> </li> <li> <p>Run <code>printf_init(UART_HandleTypeDef)</code> with your desired UART to output to. For a Nucleo, this will be specified in the Nucleo user manual which you can find online. For one of our PCBs, check the schematic to see which UART peripheral your USB is connected to. </p> </li> <li> <p><code>printf_init</code> must be run after the RTOS is initialized.</p> </li> <li> <p>Run <code>printf(...)</code> with your desired format!</p> </li> </ol> <p>To view the output, open up an application like PuTTY or picocom.</p> <ul> <li>For PuTTY, click Serial and enter your desired COM port. This should show up on your device manager (for Mac or Linux, run <code>lsusb</code>). Set the baud rate to what you configured the UART for. Hit the big open button at the bottom.</li> <li>For picocom, type in <code>picocom -b &lt;baud-rate&gt; &lt;tty-name&gt;</code> and you should be set.</li> </ul>"},{"location":"Installation/","title":"Installation Instructions","text":"<p>Development for Embedded-Sharepoint requires a Linux environment. Running Linux natively yields the best results, but there are workarounds through Nix on Mac OS or Windows Subsystem for Linux (WSL) on Windows.  </p> <p>Please ensure you've done the following before moving on:  </p> <ul> <li>Install Visual Studio Code</li> <li>Set up your GitHub account and SSH key.<ul> <li>You need to both generate an ssh key and add it to your github account</li> </ul> </li> <li>Been added to the lhr-solar organization as a member. Ask one of your leads to do so.</li> </ul> <pre><code># Clone the embedded sharepoint repository from the internet to your local computer\ngit clone git@github.com:lhr-solar/Embedded-Sharepoint.git --recursive\n# cd (change directory) to enter the Embedded Sharepoint's directory \ncd Embedded-Sharepoint\n</code></pre>"},{"location":"Installation/#linux","title":"Linux","text":"<p>Thanks for making our lives easy :) Run the steps in Nix next</p>"},{"location":"Installation/#windows","title":"Windows","text":""},{"location":"Installation/#windows-subsystem-for-linux-wsl","title":"Windows Subsystem for Linux (WSL)","text":"<p>Windows Subsystem for Linux allows you to run a linux terminal on your windows machine. We specifically use WSL2 since it allows USB passthrough for flashing our microcontrollers. To install WSL follow this guide. Make sure to install WSL2 and not WSL1. It will take time to fully install it, but once installed you can open WSL and it will ask you to create a username and password.</p>"},{"location":"Installation/#usbipd","title":"USBIPD","text":"<p>In order to see a USB device in WSL, we need to pass access of a USB device from windows to WSL. You can do this through USBIPD. In an administrator Powershell terminal run:</p> <pre><code>winget install usbipd\n</code></pre>"},{"location":"Installation/#using-wsl","title":"Using WSL","text":"<p>From now on, you'll be writting all of your solar code in WSL. We primary use VSCode as our code IDE, but there are other IDEs/code editors you can use like Vim or Nano. 1. Open Visual Studio Code 2. Go into extensions menu on the left side of VSCode, select the WSL extension from Microsoft 3. Press CTRL+SHIFT+P and press connect to WSL 4. Now your VSCode is running WSL and you can run it like a Linux environment. For more info see the WSL guide 5. Do the instructions for generating the github ssh key again while you're in WSL </p> <p>Run the Ubuntu application, and now you'll be in your WSL/Linux environment.</p> <p>Run the steps in Nix next</p>"},{"location":"Installation/#mac","title":"Mac","text":"<p>Run the steps in Nix</p>"},{"location":"Installation/#nix","title":"Nix","text":"<p>Nix is a package manger that lets you write out all the packages you want to install in a human readable format. This simplifies development since I can write out a list of dependencies needed to compile.  </p> <p>Enter the Embedded Sharepoint and run the following commands in the terminal: </p> <p>Make the nix_install script runnable</p> <pre><code>chmod +x ./nix_install.sh\n</code></pre> <p>Run the script to install the needed nix dependencies.</p> <pre><code>sudo ./nix_install.sh\n</code></pre> <p>Enter the nix shell and download dependencies for Embedded-Sharepoint</p> <pre><code>nix develop\n</code></pre> <p>In this nix shell all the dependencies needed for Embedded-Sharepoint should be installed.  Anytime you open a new terminal and want to run compile/flash code you need to run nix develop to open the shell with Sharepoint's dependencies.  </p> <p>Test if installation is succesful by compiling a test </p> <pre><code>cd test\nmake TEST=blinky\n</code></pre>"},{"location":"STM32_Ports/","title":"List of STM32 Port Names","text":"<ul> <li><code>STM32F401REx</code></li> <li><code>STM32F413RHTx</code></li> <li><code>STM32F429ZITx</code></li> <li><code>STM32F446RETx</code></li> <li><code>STM32L431CBTx</code></li> <li><code>STM32L432KCUx</code></li> <li><code>STM32L476RGTx</code></li> </ul>"},{"location":"SharepointSubmodule/","title":"Adding Sharepoint To Your Project","text":""},{"location":"SharepointSubmodule/#1-add-embedded-sharepoint-as-a-submodule","title":"1. Add Embedded-Sharepoint as a Submodule","text":"<p>A Git submodule is a way to include one Git repository inside another.  Embedded-Sharepoint contains common files so it should be stored as a submodule inside your repository. For more information about submodules: git submodules documentaiton</p> <p>Whever you want to add the Embedded-Sharepoint, run: </p> <pre><code>git submodule add https://github.com/lhr-solar/Embedded-Sharepoint.git\ngit submodule update --init --recursive\n</code></pre>"},{"location":"SharepointSubmodule/#2-writting-a-makefile-for-your-project","title":"2. Writting a makefile for your project","text":"<p>A Makefile is a file used to outline how you want your code to compile. There is a Makefile that compiles all needed files for the STM32 (our microcontroller) in the top level of the Embedded Sharepoint. You need to write a Makefile to compile your project files and call the Embedded-Sharepoint Makefile.  A good example of this a Makefile you'd make is the sharepoint's test Makefile.  </p>"},{"location":"SharepointSubmodule/#set-project-variables","title":"Set Project Variables","text":"<ul> <li><code>PROJECT_TARGET</code>: The STM32 part number (e.g., <code>stm32f446ret</code>)</li> <li><code>PROJECT_C_SOURCES</code>: List of your C source files</li> <li><code>PROJECT_C_INCLUDES</code>: List of your include directories</li> <li><code>PROJECT_BUILD_DIR</code>: Where to place build outputs</li> <li><code>BEAR_ENABLE</code> to make VSCode not mad at you (the red error squiggles)</li> </ul>"},{"location":"SharepointSubmodule/#creating-a-test-directive","title":"Creating a test directive","text":"<p>It's good to be able to test independent portions of your code instead of your whole code base at once. For example, if I have a driver just for controlling lights I should have a test file that just runs some code for my lights driver instead of the whole codebase. The way we can do this is change   </p>"},{"location":"SharepointSubmodule/#define-systemclock_config","title":"Define SystemClock_Config","text":"<p>SystemClock_Config is a function defined as \"weak\" in stm32f4xx_hal_init.c, stm32g4xx_hal_init.c, and stm32l4xx_hal_init.c. The default behavior of this function is to initialize the internal oscillator of some specific Nucleo, but since we operate with a variety of Nucleos and processors on boards, you will probably want to redefine it.</p> <p>Generate a new SystemClock_Config in STM32CubeMX and add it to one of your files in your repository. This should serve as a redefinition of the function and will override the default behavior. Make sure you are generating the code with the correct microcontroller part number in the software, and you are using an external oscillator (if generating code for one of our SOM PCBs).</p>"},{"location":"SharepointSubmodule/#examples-of-projects-that-use-embedded-sharepoint","title":"Examples of projects that use Embedded Sharepoint","text":"<ul> <li>BPS-Leader</li> <li>Active-Precharge Board                                                                                                                                                     e</li> </ul>"}]}